/**
 * Copyright (C) 2012 rene van der lende MEDIAVISION(tm)
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain this copyright notice, this 
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce this copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of rene van der lende MEDIAVISION(tm) nor the names
 *      of its contributors may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.mediavision.contacts;

import com.mediavision.dynamics.DynamicListView;
import com.mediavision.list3d.R;

import android.content.Context;
import android.graphics.drawable.Drawable;
//import android.view.View;

import java.util.ArrayList;

public class FakeContactArrayList extends ArrayList<FakeContact> {
	private static final long serialVersionUID = 4082588819448060258L;	/* Generated by SDK */

	private Context  mContext;							/* Main application context */

	private Drawable mContactImage;						/* Some image from RESource, should a real photo */
	private int		 mLayoutResID;						/* ID of layout RESource */ 

    private int 	mSize  = 20;						/* TODO default values to RESource */
    private int 	mStart =  1;						/* Size of contact array and contact number to start with */ 
	
	private DynamicListView mContactListView;
	
	/** Constructor, will use default size and start values */
	public FakeContactArrayList(final Context context, int LayoutResID, DynamicListView ListView){
		setContext(context);

		setLayoutResID(LayoutResID);
		setContactListView(ListView);
		
		setContactImage(getContext().getResources().getDrawable(R.drawable.contact_image));
		
		onAfterCreate();
	}
	
	/** Constructor */
	public FakeContactArrayList(final Context context, int LayoutResID, DynamicListView ListView, Drawable Photo){
		setContext(context);

		setLayoutResID(LayoutResID);
		setContactListView(ListView);

		setContactImage(Photo);

		onAfterCreate();
    }
	
	/** Constructor */
	public FakeContactArrayList(final Context context, int LayoutResID, DynamicListView ListView, Drawable Photo, int Start){
		setContext(context);

		setLayoutResID(LayoutResID);
		setContactListView(ListView);

		setContactImage(Photo);
		setStart(Start);

		onAfterCreate();
    }
	
	/** Constructor */
	public FakeContactArrayList(final Context context, int LayoutResID, DynamicListView ListView, int Start, int Size){
		setContext(context);

		setLayoutResID(LayoutResID);
		setContactListView(ListView);

		setContactImage(getContext().getResources().getDrawable(R.drawable.contact_image));
		setSize(Size);
		setStart(Start);

		onAfterCreate();
    }
    
	public void onAfterCreate() {

    	for (int i = mStart; i <= mSize + mStart - 1; i++)
    		{ add( new FakeContact("Contact Number " + i, "+46(0)" + getRandomContactNumber(), mContactImage)); }

    	/* TODO NOT very elegant at all, change this! */

        getContactListView().setRowAdapter(getRowAdapter(getContext()));				 /* Pass current context */
	}
	
	public FakeContactListRow getRowAdapter(Context context){
		return new FakeContactListRow(context, this, getLayoutResID());
	}
	
    /* GET functions */
	public Context	getContext()					{ return mContext;		}
	public Drawable	getContactImage()				{ return mContactImage;	}
	public int		getSize()						{ return mSize;			}
	public int		getStart()						{ return mStart;		}
	public int		getLayoutResID()				{ return mLayoutResID;	}

	public DynamicListView	getContactListView()	{ return mContactListView; }
	public int				getListViewID()			{ return mContactListView.getId(); }

	/** TODO could be put in some utility package */
	public int 		getRandomContactNumber()	{ return (int)(1000000 + 9000000 * Math.random()); }

	/* SET functions */
	private void	setContext(Context value)		{ mContext		= value; }
	private void	setContactImage(Drawable value)	{ mContactImage	= value; }
	private void	setSize(int value)				{ mSize			= value; }
	private void	setStart(int value)				{ mStart 		= value; }
	private void	setLayoutResID(int value)		{ mLayoutResID 	= value; }

	private	void	setContactListView(DynamicListView value)	{ mContactListView = value; }

}